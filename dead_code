
rays.reserve(ray_count);
records.reserve(ray_count);
for (int y = 0; y < height; y++)
{
    for (int x = 0; x < width; x++)
    {
        rays.emplace_back(camera.CameraRay(x, y, sampler));
        HitRecord record;
        record.idx = { x, y };
        record.hit = false;
        records.emplace_back(record);
    }
}
Intersect(rays, triangles, vertices, records);

for (const auto& record : records)
{
    math::Vector3 color;
    if (record.hit)
        color = math::Vector3(1.f, .17f, .3f) * std::max(0.f, math::Dot(record.n, math::Normalize(record.p - math::Vector3(0.f, 100.f, 0.f)))); //((record.n * .5f) + .5f)
    else
        color = { 0.f };
    const size_t idx = record.idx.x + record.idx.y * width;
    auto& pixel = framebuffer[idx];
    pixel = pixel + math::Vector4(color, 1.f);
}

rays.clear();
records.clear();

for (size_t i = 0; i < framebuffer.size(); i++)
{
    auto& pixel = framebuffer[i];
    images[0][i] = pixel.r / pixel.w;
    images[1][i] = pixel.g / pixel.w;
    images[2][i] = pixel.b / pixel.w;
}